plugins {
    id 'idea'
    id "org.sonarqube" version "4.3.1.3277"
    id "maven-publish"
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "net.darkhax.curseforgegradle" version "1.1.15"
    id "com.modrinth.minotaur" version "2.+"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenCentral()
    maven { url "https://dvs1.progwml6.com/files/maven" }
    maven { url "https://maven.latmod.com/" }
    maven { url "https://maven.thiakil.com" }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.blamejared.com/" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

group = 'reliquary'
version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
archivesBaseName = 'reliquary'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: 'parchment', version: "$parchment_version"
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property "mixin.env.disableRefMap", "true"
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            jvmArg '-XX:HotswapAgent=fatjar'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
        }
        server {
        }
        data {
            property 'fml.earlyprogresswindow', 'false'
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/')

        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    //compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    //runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    //deobfCompile "jeresources:JustEnoughResources-${minecraft_version}:${jer_version}"
    //deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"
    //deobfCompile "slimeknights:TConstruct:${tconstruct_version}"
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("curse.maven:jade-324717:${jade_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_cf_file_id}")

//    compileOnly fg.deobf("curse.maven:tinkers-74072:3576393")
//    runtimeOnly fg.deobf("curse.maven:tinkers-74072:3576393")
//    compileOnly fg.deobf("curse.maven:mantle-74924:3576386")
//    runtimeOnly fg.deobf("curse.maven:mantle-74924:3576386")
}

task generateSources(type: Copy) {
    from 'src/replaceme/java'
    into "$buildDir/generated-src"
    filter { line -> line.replaceAll('@MOD_VERSION@', '${project.version}') }
}

tasks.named('jar', Jar).configure {
    from('/') {
        include 'LICENSE'
    }

    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "p3pp3rf1y",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "p3pp3rf1y",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_version: mod_version,
            mod_full_version    : "${project.mod_version}.${getBuildNumber()}${getStable()}"
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return Integer.valueOf(Integer.parseInt(System.getenv("GITHUB_RUN_NUMBER")) + 950).toString()
    }
    return ""
}

static def getStable() {
    if (System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev")) {
        return "-SNAPSHOT"
    }
    return ""
}

tasks.named('publish').configure {
    dependsOn 'reobfJar'
}

publishing {
    repositories {
        maven {
            name = "ReliquaryMaven"
            url = uri("https://maven.pkg.github.com/P3pp3rF1y/Reliquary")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'reliquary'
            from(components.java)
        }
    }
}

task generateChangelog {
    doLast {
        def changelog = new StringBuilder()

        // Function to remove characters with Unicode code points 129 or higher
        def removeHighUnicodeChars = { text ->
            text.codePoints()
                    .filter { codePoint -> codePoint <= 0x007F }  // Keep only ASCII characters (U+0000 to U+007F)
                    .collect { codePoint -> new String(Character.toChars(codePoint)) }
                    .join('')
        }

        // Function to format commit messages with nesting
        def formatMultilineMessage = { message ->
            // Split message by lines, trim whitespace, and create formatted list
            def lines = message.split('\n')
            def formattedMessage = lines[0].trim() // First line as top-level list item
            if (lines.size() > 1) {
                formattedMessage += "\n" + lines[1..-1].collect { line ->
                    // Trim the line and remove leading dash if present
                    def trimmedLine = line.trim()
                    if (trimmedLine.startsWith('-')) {
                        trimmedLine = trimmedLine.substring(1).trim()
                    }
                    "    - ${trimmedLine}" // Nested list for additional lines
                }.join('\n')
            }
            return formattedMessage
        }

        // Function to remove [DEV] section from commit message
        def removeDevSection = { message ->
            def devIndex = message.indexOf('[DEV]')
            if (devIndex != -1) {
                return message.substring(0, devIndex).trim()
            }
            return message
        }

        // Get the latest commit hash
        def latestCommitHash = "git rev-parse HEAD".execute().text.trim()

        // Check if the latest commit is a merge commit
        def parentCommits = "git rev-list --parents -n 1 ${latestCommitHash}".execute().text.split()
        logger.info("Parent commits: ${parentCommits}")

        def commitMessages = []
        if (parentCommits.size() > 2) { // Merge commit has more than 2 parents
            def firstParent = parentCommits[1]
            def secondParent = parentCommits[2]
            def gitLogCommand = [
                    "bash", "-c", "git log --pretty=format:%B ${firstParent}..${secondParent}"
            ]
            commitMessages = gitLogCommand.execute().text.split('\n\n')  // Split by two newlines for each commit
            logger.info("Merge commit, ran git log command: ${gitLogCommand.join(' ')} and got ${commitMessages}")
        } else {
            // Single commit log
            commitMessages = "git log -1 --pretty=%B".execute().text.split('\n\n')
            // Split by two newlines for each commit
            logger.info("Single commit, ran git log command: git log -1 --pretty=%B and got ${commitMessages}");
        }

        def features = []
        def fixes = []
        commitMessages.each { commitMessage ->
            commitMessage = removeHighUnicodeChars(commitMessage) // Remove high Unicode characters
            commitMessage = removeDevSection(commitMessage) // Remove [DEV] section

            if (commitMessage.startsWith('feat: ')) {
                features.add(commitMessage.replaceFirst('feat: ', '').trim())
            } else if (commitMessage.startsWith('fix: ')) {
                fixes.add(commitMessage.replaceFirst('fix: ', '').trim())
            }
        }

        if (features) {
            changelog.append("### Features\n")
            features.each { feature -> changelog.append("- ${formatMultilineMessage(feature)}\n") }
        }

        if (fixes) {
            changelog.append("### Fixes\n")
            fixes.each { fix -> changelog.append("- ${formatMultilineMessage(fix)}\n") }
        }

        // Store the changelog in a project property or an environment variable
        logger.info("Compiled changelog: " + changelog.toString())
        project.ext.changelog = changelog.toString()
    }
    project.ext.changelog = ""
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn 'generateChangelog'
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    def mainFile = upload(project.curseforge_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = { project.ext.changelog }
    mainFile.addModLoader('NeoForge')
    mainFile.addModLoader('Forge')
    mainFile.releaseType = "${release_type}"
    "${release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addOptional('jei')
    mainFile.addOptional('curios')
    mainFile.addOptional('jade')
    onlyIf { !project.ext.changelog.isEmpty() }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${modrinth_project_id}"
    versionType = "${release_type}"
    uploadFile = jar
    gameVersions = "${release_versions}".split(',').collect {e -> e}
    loaders = ["forge", "neoforge"]
    dependencies {
        optional.project "jei"
        optional.project "jade"
        optional.project "curios"
    }
    changelog = provider {
        project.ext.changelog
    }
}
tasks.modrinth {
    dependsOn(tasks.generateChangelog)
    onlyIf { !project.ext.changelog.isEmpty() }
}

sonarqube {
    properties {
        property "sonar.projectName", "Reliquary"
        property "sonar.projectKey", "xreliquary:Reliquary"
    }
}

